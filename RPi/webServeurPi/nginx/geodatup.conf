upstream geodatup\_app\_server {

  \# fail\_timeout=0 means we always retry an upstream even if it failed

  \# to return a good HTTP response (in case the Unicorn master nukes a

  \# single worker for timing out).

  server unix:/var/www/run/gunicorn.sock fail\_timeout=0;

}

server {

    listen 80;

    server\_name geodatup.fr www.geodatup.fr;

    client\_max\_body\_size 4G;

    access\_log /var/log/nginx/geodatup-nginx-access.log;

    error\_log /var/log/nginx/geodatup-nginx-error.log;

    location /static/ {

        alias   /var/www/webapps/website/static/;

    }

    location /media/ {

        alias   /var/www/webapps/website/media/;

    }

    location / {

        \# an HTTP header important enough to have its own Wikipedia entry:

        \#   http://en.wikipedia.org/wiki/X-Forwarded-For

        proxy\_set\_header X-Forwarded-For \$proxy\_add\_x\_forwarded\_for;

        \# enable this if and only if you use HTTPS, this helps Rack

        \# set the proper protocol for doing redirects:

        \# proxy\_set\_header X-Forwarded-Proto https;

        \# pass the Host: header from the client right along so redirects

        \# can be set properly within the Rack application

        proxy\_set\_header Host \$http\_host;

        \# we don't want nginx trying to do something clever with

        \# redirects, we set the Host: header above already.

        proxy\_redirect off;

        \# set "proxy\_buffering off" \*only\* for Rainbows! when doing

        \# Comet/long-poll stuff.  It's also safe to set if you're

        \# using only serving fast clients with Unicorn + nginx.

        \# Otherwise you \_want\_ nginx to buffer responses to slow

        \# clients, really.

        \# proxy\_buffering off;

        \# Try to serve static files from nginx, no point in making an

        \# \*application\* server like Unicorn/Rainbows! serve static files.

        if (!-f \$request\_filename) {

            proxy\_pass http://geodatup\_app\_server;

            break;

        }

   }

    \# Error pages

    error\_page 500 502 503 504 /500.html;

    location = /500.html {

        root /var/www/webapps/website/static/;

    }

}
